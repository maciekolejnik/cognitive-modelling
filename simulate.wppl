/* Setup game structure */
var options = {
  endowments : {
    'investor': 2,
    'investee': 0
  },
  k: 2,
  horizon: 6
}
var trustCSMG = makeTrustCSMG(options)


/* Setup agents */
var trustBeliefs = {
  investor: Delta({v:0.8}),
  investee: Delta({v:0.8})
}

var bobBelief = Infer({method: 'forward', samples: 50}, function() {
  var alpha = gaussian(100,5)
  var moneyWeight = beta(1,10)
  // var moneyWeight = uniform(0,1)
  var trustWeight = beta(10,1)
  // var trustWeight = uniform(0,1)
  return {
    alpha, moneyWeight, trustWeight
  }
})
// viz(bobBelief)
var bobParams = {
 alpha: 100,
 moneyWeight: 0.1,
 trustWeight: 1
 // ,initialBelief: bobBelief
}
var bob = makeAgent(bobParams, 'investee', trustBeliefs, trustCSMG)

var aliceBelief = Infer({method: 'forward', samples: 50}, function() {
  var alpha = gaussian(100,5)
  var moneyWeight = beta(1,10)
  // var moneyWeight = uniform(0,1)
  var trustWeight = beta(10,1)
  // var trustWeight = uniform(0,1)
  return {
    alpha, moneyWeight, trustWeight
  }
})

// viz(aliceBelief)

var aliceParams = {
 alpha: 100,
 moneyWeight: 0.1,
 trustWeight: 1
 // ,initialBelief: aliceBelief
}
var alice = makeAgent(aliceParams, 'investor', trustBeliefs, trustCSMG)

var players = {
  investor: alice,
  investee: bob
}

var beliefs = {
  investor: aliceBelief,
  investee: bobBelief
}

var names = {
  investor: 'Alice',
  investee: 'Bob'
}

/* Simulate execution */
var simulate = function(game, players, beliefs, state) {
  var trajectory = function(state, beliefs, timeLeft)  {
    if (timeLeft > 0) {
      var actingPlayer = players[state.turn]
      display("New iteration. Time left: " + timeLeft + ", " + names[state.turn] + " to act")
      var act = actingPlayer.act
      var start = _.now()
      var action = sample(act(state, timeLeft, beliefs[state.turn], undefined, true))
      var end = _.now()
      display("Action computed: " + action + ". Took " + (end - start) + " (msec?)")
      var transition = game.transition
      var nextState = transition(state, action)
      var investorUpdateBelief = players.investor.updateBelief
      var investeeUpdateBelief = players.investee.updateBelief
      var start = _.now()
      var nextBeliefs = {
        investor: investorUpdateBelief(beliefs.investor, state, action, timeLeft),
        investee: investeeUpdateBelief(beliefs.investee, state, action, timeLeft)
      }
      var end = _.now()
      display("Beliefs updated. Took " + (end - start) + " (msec?).")
      if (timeLeft == 1) {
        display("final trust")
        display("Alice: " + trustExp(nextBeliefs.investor))
        display("Bob: " + trustExp(nextBeliefs.investee))
      }
      return [[state, action]].concat(trajectory(nextState, nextBeliefs, timeLeft - 1))
    }
    return []
  }
  var startingState = (state === undefined) ? game.initialState : state
  // var beliefs = {
  //   investor: players.investor.params.initialBelief,
  //   investee: players.investee.params.initialBelief
  // }
  return trajectory(startingState, beliefs, game.params.horizon)
}

display("Initial trusts")
display("Alice: " + trustExp(aliceBelief))
display("Bob: " + trustExp(bobBelief))
var trajectory = simulate(trustCSMG, players, beliefs)
display()

display(trajectory)