/* Setup game structure */
let options = {
  horizon: 2,
  beliefRepresentation: 'dirichlet'
}

let gameSpecificParams = {
  endowment: 10
}

let getScenarios = function() {
  /**
   basic scenario for now
   */
  let getScenario1 = function() {
    let name = "basic"
    let proposerParams = generateParams([1], 100, 0.9, 2)
    let proposerInitialState = generateInitialState(0, 2, 100, 0.9, 2)
    let proposerMentalEstimations = arrayReplace(
      proposerInitialState.mentalEstimations,1, [Delta({v: 1})])
    let proposerBelief = arrayReplace(
      proposerInitialState.belief, 1,[2,2]
    )
    let proposer = {
      params: proposerParams,
      initialState: extend(proposerInitialState, {
        mentalEstimations: proposerMentalEstimations,
        belief: proposerBelief
      }
      )
    }
    let proposeeParams = generateParams([0.5,0.5], 100, 0.9, 2)
    let proposeeInitialState = generateInitialState(1, 2, 100, 0.9, 2)
    // let mentalEstimations = arrayReplace(
    //   proposer.initialState.mentalEstimations, 1, [Delta({v: 1})])
    let proposeeBelief = arrayReplace(
      proposeeInitialState.belief, 0,[1]
    )
    let proposee = {
      params: proposeeParams,
      initialState: extend(proposeeInitialState, {
        belief: proposeeBelief
      })
    }
    let agents = [proposer, proposee]
    return {name, agents, options, gameSpecificParams}
  }

  return [getScenario1()]
}

let printRegret = function(game, agents, state, names) {
  let turn = game.API.turn
  if (turn(state) === 0) {
    let proposee = agents[1]
    let mentalState = proposee.mentalState
    let regret = mentalState(state)[0]
    let stateToString = game.API.stateToString
    display(names[1] + "'s regret at state " + stateToString(state) + ": " + regret)
  }
}

let callbacks = {
  periodic: printRegret
}

let scenarios = getScenarios()
simulateScenarios(scenarios, makeUltimatumCSMG, ['proposer', 'responder'], callbacks)