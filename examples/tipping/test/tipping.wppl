/** Test correctness of the model in src/tipping.wppl */

let paramsOk = {
    tippingNorm: 10,
    gaspScores: [4.5, 5.5]
}

// let paramsInvalid = {
//     tip: 'hello',
//     gasp: 43
// }
//
// display(stringInABox("this should fail"))
// let gameInvalid = makeTippingCSMG(paramsInvalid)
// display(stringInABox("end of failing"))

let gameOk = assertDefined(makeTippingCSMG(paramsOk),
    "FAIL: game not created",
    "OK: game created...")

/** gameOk should now be the following object.
 * {
        actions,
        transitionFn,
        initialState,
        physicalRewardStructure,
        getMentalStateDynamics,
        rewardUtilityFunctions,
        API,
        params
    }
 we'll test each of these in what follows
 */

/** API is an object of the form
 * {
 *      getPreviousState,
        getLastAction,
        isInitial,
        turn,
        other,
        stateToString
   }
 */
let API = assertDefined(gameOk.API,
    "FAIL: gameOk: gameAPI undefined",
    "OK: API defined...")

let getPreviousState = assertDefined(API.getPreviousState,
    "FAIL: API.getPreviousState undefined",
    "OK: API.getPreviousState defined...")

let getLastAction = assertDefined(API.getLastAction,
    "FAIL: API.getLastAction undefined",
    "OK: API.getLastAction defined...")

let isInitial = assertDefined(API.isInitial,
    "FAIL: API.isInitial undefined",
    "OK: API.isInitial defined...")

let turn = assertDefined(API.turn,
    "FAIL: API.turn undefined",
    "OK: API.turn defined...")

let other = assertDefined(API.other,
    "FAIL: API.other undefined",
    "OK: API.other defined...")

let stateToString = assertDefined(API.stateToString,
    "FAIL: API.stateToString undefined",
    "OK: API.stateToString defined...")



/** make sure actions and transitions are good by starting
 from initial state */
let initialState = assertDefined(gameOk.initialState,
    "FAIL: gameOk.API: initialState undefined",
    "OK: initialState defined...")

assert(isInitial(initialState),
    "FAIL: isInitial returned false for initial state",
    "OK: isInitial working fine")

assertEqual(turn(initialState), 0,
    "FAIL: should be 0's turn in initial state",
    "OK: turn correct in initial state")

assert(initialState.pastService.length == 0  && initialState.pastTips.length == 0,
    "FAIL: initialState doesn't have the required structure",
    "OK: initialState correct...")

let actions = assertDefined(gameOk.actions,
    "FAIL: actions mapping undefined",
    "OK: actions defined...")

let transitionFn = assertDefined(gameOk.transitionFn,
    "FAIL: transition function undefined",
    "OK: transition function defined")

assertEqual(actions(initialState), ['bad', 'normal', 'good'],
    "FAIL: actions from initial state don't match expectation",
    "OK: actions from initial state are good")

let nextStateShouldBe = {
    pastService: ['bad'],
    pastTips: []
}

let nextStateIs = transitionFn(initialState, 'bad')
assertEqual(nextStateIs, nextStateShouldBe,
    "FAIL: transition function faulty: expected " +
    stateToString(nextStateShouldBe) + ", got: " + stateToString(nextStateIs),
    "OK: transition function good on init state")

let prevState = getPreviousState(nextStateIs)
assertEqual(initialState, prevState,
    "FAIL: previous state should be: " + stateToString(initialState)
    + ", is: " + stateToString(prevState),
    "OK: previous state good initial...")

let lastAction = getLastAction(nextStateIs)
assertEqual('bad', lastAction,
    "FAIL: last action at " + stateToString(nextStateIs) + " is: "
    + lastAction + ", expected: \'bad\'",
    "OK: lastAction worked")