/* Setup game structure */
var options = {
  endowments : {
    'investor': 6,
    'investee': 3
  },
  k: 2,
  horizon: 6
}
var game = makeTrustCSMG(options)


/* Setup agents */
var trustBeliefs = {
  investor: Delta({v:0.8}),
  investee: Delta({v:0.8})
}

var bobBelief = Infer({method: 'forward', samples: 50}, function() {
  var alpha = gaussian(100,5)
  var moneyWeight = beta(1,10)
  var trustWeight = beta(10,1)
  var discountFactor = 0.9
  var lookAhead = 2
  return {
    alpha, moneyWeight, trustWeight, discountFactor, lookAhead
  }
})
// viz(bobBelief)
var bobParams = {
 alpha: 100,
 moneyWeight: 0.1,
 trustWeight: 1,
 discountFactor: 0.9,
 lookAhead: 2
}
var bob = makeAgent(bobParams, 'investee', trustBeliefs, bobBelief, game)

var aliceBelief = Infer({method: 'forward', samples: 50}, function() {
  var alpha = gaussian(100,5)
  var moneyWeight = beta(1,10)
  var trustWeight = beta(10,1)
  var discountFactor = 0.9
  var lookAhead = 2
  return {
    alpha, moneyWeight, trustWeight, discountFactor, lookAhead
  }
})

// viz(aliceBelief)

var aliceParams = {
 alpha: 100,
 moneyWeight: 0.1,
 trustWeight: 1,
 discountFactor: 0.9,
 lookAhead: 2
}
var alice = makeAgent(aliceParams, 'investor', trustBeliefs, aliceBelief, game)

var players = {
  investor: alice,
  investee: bob
}

var beliefs = {
  investor: aliceBelief,
  investee: bobBelief
}

var names = {
  investor: 'Alice',
  investee: 'Bob'
}

display("Compute Alice's initial aciton")
var act = alice.act
var state  = game.initialState
var start = _.now()
var action = sample(act(state))
display("Action computed " + action + ". Took " + (_.now() - start) + " msec")

/* Simulate execution */
// var simulate = function(game, players, state) {
//   var trajectory = function(state, timeLeft)  {
//     if (timeLeft > 0) {
//       var actingPlayer = players[state.turn]
//       display("New iteration. Time left: " + timeLeft + ", " + names[state.turn] + " to act")
//       var act = actingPlayer.act
//       var start = _.now()
//       var action = sample(act(state))
//       var end = _.now()
//       display("Action computed: " + action + ". Took " + (end - start) + " msec")
//       var transition = game.transition
//       var nextState = transition(state, action)
//       if (timeLeft == 1) {
//         var aliceBelief = players['investor'].belief
//         var bobBelief = players['investee'].belief
//         display("final trust")
//         display("Alice: " + trustExp(aliceBelief(nextState)))
//         display("Bob: " + trustExp(bobBelief(nextState)))
//       }
//       return [[state, action]].concat(trajectory(nextState, timeLeft - 1))
//     }
//     return []
//   }
//   var startingState = (state === undefined) ? game.initialState : state
//   return trajectory(startingState, game.params.horizon)
// }

// display("Initial trusts")
// display("Alice: " + trustExp(aliceBelief))
// display("Bob: " + trustExp(bobBelief))
// var trajectory = simulate(game, players)

// display(trajectory)
