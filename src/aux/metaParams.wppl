/** dependencies: none
 *
 * metaParams.wppl
 *
 * Agent decision-making in our framework is defined in terms of
 * meta-parameters. Currently, there are three: rationality (alpha),
 * lookahead and discount factor. However, there might be more in
 * the future, and we would also like to support user-defined meta
 * parameters. Therefore, we provide function that operate on all
 * meta-parameters, so our code doesn't have to change when new
 * meta-parameters are defined (only the code below has to change)
 *
 */

let sampleMetaParamsEstimations = function (metaParamsEstimations) {
  info("sampleMetaParamsEstimations(" + metaParamsEstimations + ")")
  let sampleIfDefined = function(dist) {
    if (dist === undefined) return undefined
    assertHasType(dist, DIST_TYPE,
      "bad game specification: distribution expected in " +
      "metaParamsEstimations, found: " + toString(dist))
    return sample(dist)
  }
  return {
    alpha: map(sampleIfDefined, metaParamsEstimations.alpha),
    lookAhead: map(sampleIfDefined, metaParamsEstimations.lookAhead),
    discountFactor: map(sampleIfDefined, metaParamsEstimations.discountFactor)
  }
}

let mergeMetaParams = function(othersMetaParams, selfMetaParams, selfId) {
  info("mergeMetaParams(" + othersMetaParams + ", " + selfMetaParams + ")")
  return {
    alpha: arrayReplace(othersMetaParams.alpha, selfId, selfMetaParams.alpha),
    lookAhead: arrayReplace(othersMetaParams.lookAhead, selfId, selfMetaParams.lookAhead),
    discountFactor: arrayReplace(othersMetaParams.discountFactor, selfId, selfMetaParams.discountFactor),
  }
}

let metaParamsAsPairs = function(metaParams) {
  return [
    ['alpha', metaParams.alpha],
    ['lookAhead', metaParams.lookAhead],
    ['discountFactor', metaParams.discountFactor]
  ]
}

let metaParamsList = ['alpha', 'lookAhead', 'discountFactor']