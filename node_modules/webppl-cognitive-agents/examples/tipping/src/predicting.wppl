/** To run this file:
 $ webppl examples/tipping/src/predicting.wppl --require . --require examples/tipping/ --require webppl-fs
 */

let PATH = "examples/tipping/data/"

/** PHASE 1 */
let dataFilename = getDataFilename(PATH)
let dataLines = getRelevantLines(dataFilename)
// let lines = getRelevantLines('examples/tipping/data/test.csv')
display(dataLines)
let players = readPlayersLine(dataLines[0])
display(players)
let params = readParamsArray(dataLines[1])
display(params)
let gameSpecificParams = {
  tippingNorm: params[0],
  gaspScores: [params[1], params[2]]
}
let data = readPlays(dataLines.slice(2))

let tipeeMetaParamsP = {
  alpha: [0,5,10],
  discountFactor: [0.9],
  lookAhead: [2]
}

let playersDataStructure =
  [
     /** agent 0 - tipee */
     constructBeliefOverPlayer(0, [[1]], tipeeMetaParamsP,[[1]], [[1,3],[2,2],[3,1]] )
    ,
    /** agent 1 - tipper */
    constructBeliefOverPlayer(1, [[.9,.1],[.5,.5],[.1,.9]], tipeeMetaParamsP,[[1]], [[1,3],[2,2],[3,1]] )
  ]

/** END OF PHASE 1
 * We now have
 * - players data structure
 * - game-specific params
 * - and data (an array of plays)
 */

/** PHASE 2 */

/** First, create appropriate game structure */
let externalParams = {
  beliefRepresentation: 'dirichlet'
}
let csmg = makeCSMG(makeTippingCSMG(gameSpecificParams), externalParams)
/** Then condition on the observed data to compute posterior */
let posterior = processData(data, csmg, playersDataStructure)

/** PHASE 3 */

/** Read the data from the prediction file */

let filename = getPredictFilename(PATH)
let predictLines = getRelevantLines(filename)
let playsToPredict = readPlays(predictLines)