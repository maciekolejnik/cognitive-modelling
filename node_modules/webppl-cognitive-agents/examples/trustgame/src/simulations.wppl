/** Simulations for the trust game */

/** To run:
 * webppl examples/trustgame/src/simulations.wppl --require . --require examples/trustgame
 */

/** Auxiliary */
let computeAverageTransfers = function(trajectory) {
  let avgInvest = listMean(map(function(x) { return x[1]},
    filter(function(x) {return _.isEqual(x[0].turn, 'investee')},
      trajectory)))
  let avgRet = listMean(map(function(x) { return x[1]},
    filter(function(x) {return _.isEqual(x[0].turn, 'investor')},
      trajectory)))
  return [avgInvest, avgRet]
}

let getAgents = function(goalCoeffs, beliefs, trustExps) {
  let aliceParams = generateParams(goalCoeffs[0], 100, 0.8, 2)
  let aliceInitialStateTmp =
    generateInitialState(0, 2, 100, 0.8, 3)
  let aliceInitialState =
    extend(aliceInitialStateTmp
      ,
      {
        belief: arrayReplace(aliceInitialStateTmp.belief, 1, beliefs[0]),
        mentalEstimations:
          arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: trustExps[0]})])
      }
    )
  let bobParams = generateParams(goalCoeffs[0], 100, 0.8, 3)
  let bobInitialStateTmp =
    generateInitialState(1, 2, 100, 0.8, 2)
  let bobInitialState =
    extend(bobInitialStateTmp
      ,
      {
        belief: arrayReplace(bobInitialStateTmp.belief, 0, beliefs[0]),
        mentalEstimations:
          arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: trustExps[1]})])
      }
    )
  let alice = {
    params: aliceParams,
    initialState: aliceInitialState
  }
  let bob = {
    params: bobParams,
    initialState: bobInitialState
  }
  let agents = [alice, bob]
  return agents
}

/* Setup game structure */
let gameSpecificParams = {
  endowments : {
    'investor': 4,
    'investee': 0
  },
  k: 2
}

let options = {
  horizon: 10,
  beliefRepresentation: 'dirichlet'
}

let getScenarios = function() {
  /**
   * This is a basic scenario with standard parameters
   */
  let getScenarioBasic = function() {
    let name = "Basic (high trust, high trustworthiness)"
    let bobParams = generateParams([0.3,0.7], 100, 0.8, 3)
    let bobInitialStateTmp =
      generateInitialState(1, 2, 100, 0.8, 2)
    let bobInitialState =
      extend(bobInitialStateTmp
        ,
        {
          belief: arrayReplace(bobInitialStateTmp.belief, 0, [1,3]),
          mentalEstimations:
            arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.7})])
        }
        )
    let aliceParams = generateParams([0.3,0.7], 100, 0.8, 2)
    let aliceInitialStateTmp =
      generateInitialState(0, 2, 100, 0.8, 3)
    let aliceInitialState =
      extend(aliceInitialStateTmp
        ,
        {
          belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,3]),
          mentalEstimations:
            arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.7})])
        }
      )
    let alice = {
      params: aliceParams,
      initialState: aliceInitialState
    }
    let bob = {
      params: bobParams,
      initialState: bobInitialState
    }
    let agents = [alice, bob]
    return {name, agents, options, gameSpecificParams}
  }



  return [getScenarioBasic()]
}

let getSetTrustScenarios = function(name, initialBelief) {
  let arrayOfAgentsConfigurations = repeat(20, function() {
    let a = uniform(0,1)
    let b = uniform(0,1)
    let beliefs = [initialBelief,initialBelief]
    let trustExps = [uniform(0,1), uniform(0,1)]
    return getAgents([[a, 1-a], [b,1-b]], beliefs, trustExps)
  })
  return map(function(agents) {
    return {name, agents, options, gameSpecificParams}
  }, arrayOfAgentsConfigurations)
}

let printTrusts = function(game, agents, state, names) {
  let f = function(agentID, agent) {
    let mentalState = agent.mentalState
    let mentalRewards = agent.mentalRewards
    let trust = mentalState(state)[0]
    let trustEstimation = mentalRewards(state)[0]
    return names[agentID] + ":\n  trust: " + trust +
      "\n  trust estimation: " + trustEstimation
  }
  display(mapIndexed(f, agents).join("\n"))
}

let callbacks = {
  periodic: printTrusts
}

// let scenarios = getScenarios().slice(1,2)
// let scenarios = getScenarios().slice(0,1)
// simulateScenarios(scenarios, makeTrustCSMG, ['alice','bob'], callbacks)

let paperExperiments = [
  {
    run: function() {
      /** First comes an experiment that investigates how initial trust affects
       * amounts sent - this is H2 from QEST paper */
      let configurations = [
        ["Very low trust", [4,1]],
        ["Low trust", [3,2]],
        ["Medium trust", [2,2]],
        ["High trust", [2,3]],
        ["Very high trust", [1,4]]
      ]

      let averageTransfers = reduceL(function(acc, config) {
        let trajectories = simulateScenarios(getSetTrustScenarios(config[0], config[1]), makeTrustCSMG, ['alice','bob'], callbacks)
        let averages = map(computeAverageTransfers, trajectories)
        let avgInvest = listMean(map(fst, averages))
        let avgReturn = listMean(map(snd, averages))
        let summary = [config[0], [avgInvest, avgReturn]]
        return acc.concat([summary])
      }, [], configurations)

      reduceL(function(acc, avgTransfers) {
        display(avgTransfers[0] + ": " + avgTransfers[1][0] + " on average " +
          "invested, " + avgTransfers[1][1] + " on average returned")
      }, [], averageTransfers)
    }
  },

  {
    run: function() {
      /** Now we check whether a fair agent can punish a con man who tries
       * to take advantage of them. H3 */
      let aliceParams = generateParams([0.4,0.6], 100, 0.8, 2)
      let aliceInitialStateTmp =
        generateInitialState(0, 2, 100, 0.8, 3)
      let aliceInitialState =
        extend(aliceInitialStateTmp
          ,
          {
            belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,3]),
            mentalEstimations:
              arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.7})])
          }
        )
      let gameSetup = makeTrustCSMG(gameSpecificParams)
      let game = makeCSMG(gameSetup, options)
      let alice = makeAgent(aliceParams, 0, aliceInitialState, game)
      let initialState = game.initialState
      let act = alice.act
      let action = sample(act(initialState))
      display('action computed: ' + action)
    }
  },

  {
    run: function() {
      /** Now we check whether a fair agent can punish a con man who tries
       * to take advantage of them. H3 alternative */
      let aliceParams = generateParams([0.5,0.5], 100, 0.8, 2)
      let aliceInitialStateTmp =
        generateInitialState(0, 2, 100, 0.8, 3)
      let aliceInitialState =
        extend(aliceInitialStateTmp
          ,
          {
            belief: arrayReplace(aliceInitialStateTmp.belief, 1, [1,1]),
            mentalEstimations:
              arrayReplace(aliceInitialStateTmp.mentalEstimations, 1, [Delta({v: 0.5})])
          }
        )
      let bobParams = generateParams([1,0], 100, 0.8, 5)
      let bobInitialStateTmp =
        generateInitialState(1, 2, 100, 0.8, 2)
      let bobInitialState =
        extend(bobInitialStateTmp
          ,
          {
            belief: arrayReplace(bobInitialStateTmp.belief, 0, [2,2]),
            mentalEstimations:
              arrayReplace(bobInitialStateTmp.mentalEstimations, 0, [Delta({v: 0.5})])
          }
        )
      let alice = {
        params: aliceParams,
        initialState: aliceInitialState
      }
      let bob = {
        params: bobParams,
        initialState: bobInitialState
      }
      let agents = [alice, bob]
      let name = "H3 both cognitive"
      let scenario = { name, agents, options, gameSpecificParams}
      simulateScenarios([scenario], makeTrustCSMG, ['alice', 'bob'], callbacks)
    }
  }
]

let runH2 = paperExperiments[0].run
let runH3 = paperExperiments[1].run
let runH3Alt = paperExperiments[2].run

runH3Alt()



