/** Auxiliary below
 * board is a 9 element (flattened) array representing the contents
 * of squares in a game of tictactoe. It is the most convenient
 * representation from the point of view of computing various things
 * about the game. However, it doesn't capture the history of
 * execution (the order of moves is lost) which makes it inadequate
 * when mental attitudes are introduced (as they introduce history-
 * -dependent notions).
 * */

let isOver = function(board) {
  return threeInARow(board, 'X') ||
    threeInARow(board, 'O') ||
    all(isDefined, board)
}

let indexBoard = function(board) {
  return mapIndexed(function(i, mark) {
    return [mark, i]
  }, board)
}

/** returns array of 3 element arrays representing rows */
let getRows = function(board) {
  return map(function(i) {
    return board.slice(3*i, 3*i+3)
  }, rangeArray(0, 2))
}

/** returns array of 3 element arrays representing cols */
let getCols = function(board) {
  let indexedBoard = indexBoard(board)
  map(function(colNo) {
    let indexedColumn = filter(function(indexedSquare) {
      return indexedSquare[1] % 3 === colNo
    }, indexedBoard)
    assertEqual(indexedColumn.length, 3,
      "getCols(): wrong size of column")
    return map(function(indexedSquare) {
      return indexedSquare[0]
    }, indexedColumn)
  }, rangeArray(0,2))
}

let getDiagonals = function(board) {
  return [
    [board[0], board[4], board[8]],
    [board[2], board[4], board[6]]
  ]
}

let getAllLines = function(board) {
  let rows = getRows(board)
  let cols = getCols(board)
  let diags = getDiagonals(board)
  let allLines = arrayConcat([rows, cols, diags])
  return allLines
}

let isWinning = function(line, mark) {
  return all(function(m) { return mark === m}, line)
}

/** returns true if *mark* has an opportunity of winning
 * by completing *line*. In other words, line has two *mark*s
 */
let isWinningOpportunity = function(line, mark) {
  let marks = filter(function(m) {
    return m === mark
  }, line).length
  let empties = filter(isUndefined, line).length
  return marks === 2 && empties === 1
}

let threeInARow = function(board, mark) {
  let allLines = getAllLines(board)
  let winningLine = any(function (line) {
      return isWinning(line, mark)
    },
    allLines)
  return winningLine
}



/** This function defines the tictactoe game.
 * Main thing to note is that we use two different representations
 * of state: a more efficient one which doesn't capture the history
 * of play (appropriate for non-mental analysis) and a less
 * efficient one that does capture the history.
 *
 *  gameParams expected in following format {
 // *    beliefRepresentation: 'discrete'/dirichlet',
 *    stateRepresentation: 'history/efficient'
 *  }
 *
 */
let makeTicTacToe = function (gameParams) {
  // let beliefRepresentation = assertDefined(gameParams.beliefRepresentation,
  //   "makeGame(): gameParams.beliefRepresentation must be passed" +
  //   " but not found")
  let stateRepresentation = assertDefined(gameParams.stateRepresentation,
    "makeGame(): gameParams.stateRepresentation must be passed" +
    " but not found")

  let marks = ['X', 'O']

  let getBoard = function() {
    return {
      'history': function(state) {
        let emptyBoard = repeat(9, getUndefined)
        return reduceL(function(board,move) {
          return arrayReplace(board, move[1], move[0])
        }, emptyBoard, state)
      },
      'efficient': identity
    }[stateRepresentation]
  }()

  let turn = function(state) {
    let turnFns = {
      'history': function(state) {
        return state.length % 2
      },
      'efficient': function(board) {
        let takenSquares = filter(isDefined, board)
        return takenSquares.length % 2
      }
    }
    let appropriateFn = turnFns[stateRepresentation]
    return appropriateFn(state)
  }

  let winningOpportunityLines = function(state, forPlayerId) {
    let board = getBoard(state)
    if (isOver(board)) return []
    let allLines = getLines(board)
    let result = filter(function(line) {
      return isWinningOpportunity(line, marks[forPlayerId])
    }, allLines)
    return result
  }

  /** checks if *action* at *state* is a blunder
   * (defined as not defending against obvious winning
   *  threat or not taking an obvious winning opportunity) */
  let isBlunder = function(state, action) {
    let turn = turn(state) /** 'X' or 'O' */
    let winningOpportunityLines = winningOpportunityLines(state, turn)
    let losingOpportunityLines = winningOpportunityLines(state, (turn+1)%2)
    let nextState = sample(transitionFn(state, action))
    let nextBoard = getBoard(nextState)
    if (winningOpportunityLines.length > 0)
      return !isOver(nextBoard)
    if (losingOpportunityLines.length === 1) {
      return isOver(nextBoard)
    }
    return false
  }

  /** checks if action taken at state has created a fork, defined
   * as three marks arranged in a way that creates two lines that
   * are 2/3 for mark */
  let createdFork = function(state, action) {
    let turn = turn(state)
    /** fork is created when player *turn* had no *winning opportunities*
     * before his move and had 2 after his move */
    let nextState = sample(transitionFn(state, action))
    let opportunitiesBeforeMove = winningOpportunityLines(state, turn)
    let opportunitiesAfterMove = winningOpportunityLines(nextState, turn)
    return opportunitiesBeforeMove.length === 0 &&
      opportunitiesAfterMove.length === 2
  }

  /** actions are moves i.e. [mark, position] pairs */
  let actions = function (state) {
    let board = getBoard(state)
    if (isOver(board)) return ["nil"]
    let mark = marks[turn(state)]
    /** retrieve empty positions */
    let indexedSquares = indexBoard(board)
    let emptyIndexedSquares = filter(function(indexedSquare) {
      return indexedSquare[0] === undefined
    }, indexedSquares)
    let moves = map(function(emptyIndexedSquare) {
      return [mark, emptyIndexedSquare[1]]
    }, emptyIndexedSquares)
    return moves
  }

  let transitionFn = function(state, action) {
    let nextStateFns = {
      'history': function(state, action) {
        let nextState = [action].concat(state)
        return nextState
      },
      'efficient': function (board, action) {
        let nextBoard = arrayReplace(board, action[1], action[0])
        return nextBoard
      }
    }
    // let result = function(state, action) {
      if (action === "nil") return Delta({v: state})
      let board = getBoard(state)
      let mark = action[0]
      let pos = action[1]
      assert(isUndefined(board[pos]),
        "move " + arrayToString(action) + " in state " +
        stateToString(board) + " invalid!")
      assert(marks[turn(board)] === mark,
        "it's not turn of " + mark + " at state " +
        stateToString(board))
      let nextStateFn = nextStateFns[stateRepresentation]
      let nextState = nextStateFn(state, action)
      return Delta({v: nextState})
    // }
    // return result
  }


  /** represents state as follows:
   *  ___
   * |MMM|
   * |MMM|
   * |MMM|
   *
   * where each M is one of ' ', 'X', 'O'
   */
  let stateToString = function(state) {
    let board = getBoard(state)
    let short = true
    let firstLine = short ? "" : "\n ___"
    let result = reduceL(function(acc, mark) {
      let m = mark || " "
      let colNo = acc[0] % 3
      let append = short ? m : function() {
        if (colNo === 0) return "\n|" + m
        if (colNo === 2) return m + "|"
        return m
      }()
      return [acc[0]+1, acc[1] + append]
    }, [0, firstLine], board)
    return result[1] + (short ? "" : "\n")
  }

  let API = function () {

    let getPreviousState = function() {
      let fns = {
        'history': function (state) {
          return state.slice(1)
        },
        'efficient': function (state) {
          error("something's gone wrong: getPreviousState should not" +
            " be called as no mental and no belief update in this game")
        }
      }
      return fns[stateRepresentation]
    }()

    let getLastAction = function() {
      let fns = {
        'history': function (state) {
          assert(!isInitial(state))
          return state[0]
        },
        'efficient': function (state) {
          error("something's gone wrong: getLastAction should not" +
            " be called as no mental and no belief update in this game")
        }
      }
      return fns[stateRepresentation]
    }()

    let isInitial = function() {
      let fns = {
        'history': function (state) {
          return isEmpty(state)
        },
        'efficient': function (state) {
          return all(isUndefined, state)
        }
      }
      return fns[stateRepresentation]
    }()

    let API = {
      getPreviousState,
      getLastAction,
      isInitial,
      turn,
      stateToString
    }
    return API
  }()

  let physicalRewardStructure = function () {
    let stateRewards = function (state) {
      if (threeInARow(state, 'X')) return [[1],[-1]]
      if (threeInARow(state, 'O')) return [[-1],[1]]
      return [[0],[0]]
    }
    let actionRewards = function (state, action) {
      return [[0], [0]]
    }
    return {
      actionRewards,
      stateRewards
    }
  }()

  /** No mental rewards for simplicity */
  let mentalStateDynamics = function () {
    if (_.isEqual(stateRepresentation, 'efficient')) {
      return {
        estimationHeuristicArr: [], /** not needed */
        mentalStateArr: [],
        mentalUtilities: [
          [], /** agent 0*/
          []
        ]
      }
    }

    /** We assume satisfaction from winning is high
     * only if the win was not given by the opponent... */
    let estimateSatisfaction =
      function(prevSatisfaction, ofAgentID, prevState, lastAction) {
        let turn = turn(prevState)
        if (turn !== ofAgentID && isBlunder(prevState, lastAction)) {
          // satisfaction decreases if opponent blundered
          return -1
        }
        if (turn === ofAgentID && createdFork(prevState, lastAction)) {
          // satisfaction high if fork created
          return 1
        }
        return prevSatisfaction
      }

    let computeSatisfaction = function(state, belief) {
      error("computing satisfaction should not be necessary")
    }

    return {
      estimationHeuristicArr: [estimateSatisfaction],
      mentalStateArr: [computeSatisfaction],
      mentalUtilities: [
        [[1]], /** agent 0 - parent - cares about satisfaction of kid */
        [[]] /** agent 1 - kid doesnt care about  */
      ]
    }
  }()

  let initialState = {
    'efficient': repeat(9, getUndefined),
    'history': []
  }[stateRepresentation]

  let mentalRewardsNo = {
    'history': 1,
    'efficient': 0
  }[stateRepresentation]

  let params = {
    // beliefRepresentation,
    numberOfAgents: 2,
    numberOfRewards: {
      physical: 1,
      mental: mentalRewardsNo /** = sum (map length rewardTypeArr) */
    }
  }

  let rewardUtilityFunctions =
    (_.isEqual(stateRepresentation, 'efficient')) ?
      [identity] : [identity, identity]

  return {
    actions,
    transitionFn,
    initialState,
    physicalRewardStructure,
    mentalStateDynamics,
    rewardUtilityFunctions,
    API,
    params
  }
}