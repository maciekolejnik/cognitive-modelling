/* Setup game structure */
let options = {
  endowments : {
    'investor': 4,
    'investee': 0
  },
  k: 2,
  horizon: 10,
  beliefRepresentation: 'dirichlet'
}

let optionsSmallEndowments = {
  endowments : {
    'investor': 2,
    'investee': 1
  },
  k: 2,
  horizon: 4,
  beliefRepresentation: 'dirichlet'
}

// var trustCSMG = makeTrustCSMG(options)


/* Setup agents */
// var bobBelief = Infer({method: 'forward', samples: 50}, function() {
//   var moneyWeight = beta(1,10)
//   var trustWeight = beta(10,1)
//   return {
//     moneyWeight, trustWeight
//   }
// })

let getScenarios = function() {
  /**
   * In this scenario, Alice and Bob are both trustworthy, trust each other and
   * estimate that the other trusts them. (they are exactly the same)
   * For simplicity, meta-parameters are fixed at {alpha: 100, lookAhead: 2, discountFactor: 0.8}
   * and meta-params estimations are accurate
   */
  let getScenario1 = function() {
    let name = "high trustworthiness, high trust, perfect information"
    let bobParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [1,3],
      mentalEstimations: [Delta({v: 0.7})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [1,3],
      mentalEstimations: [Delta({v: 0.7})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options}
  }

  /**
   *
   */
  let getScenario2 = function() {
    let name = "low trustworthiness, low trust, low trust estimation, perfect information"
    let bobParams = {
      goalCoeffs: [0.7, 0.3],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [3,1],
      mentalEstimations: [Delta({v: 0.3})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.7, 0.3],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [3,1],
      mentalEstimations: [Delta({v: 0.3})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options}
  }

  /**
   *
   */
  let getScenario3 = function() {
    let name = "alice - trustworthy and trusting, assumes others trust her; bob the opposite. "
    let bobParams = {
      goalCoeffs: [0.8, 0.2],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [3,1],
      mentalEstimations: [Delta({v: 0.2})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [1,3],
      mentalEstimations: [Delta({v: 0.7})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options}
  }

  /**
   *
   */
  let getScenario4 = function() {
    let name = "money-oriented agents who trust each other"
    let bobParams = {
      goalCoeffs: [0.7, 0.3],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [1,10],
      mentalEstimations: [Delta({v: 0.5})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.7, 0.3],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [1,10],
      mentalEstimations: [Delta({v: 0.5})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options:  options}
  }

  /**
   *
   */
  let getScenario5 = function() {
    let name = ""
    let bobParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [4,1],
      mentalEstimations: [Delta({v: 0.2})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 100,
        discountFactor: 0.8,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [4,1],
      mentalEstimations: [Delta({v: 0.2})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [100]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.8]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options:  options}
  }

  let getScenario1FromWriteUp = function() {
    let name = "scenario in the overleaf writeup"
    let bobParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 1000,
        discountFactor: 0.7,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [2,5],
      mentalEstimations: [Delta({v: 0.8})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [1000]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.7]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.1, 0.9],
      metaParams: {
        alpha: 1000,
        discountFactor: 0.7,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [2,5],
      mentalEstimations: [Delta({v: 0.8})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [1000]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.7]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options:  options}
  }

  let getScenario2FromWriteUp = function() {
    let name = "scenario 2 in the overleaf writeup - asymmetrical case"
    let bobParams = {
      goalCoeffs: [0.2, 0.8],
      metaParams: {
        alpha: 1000,
        discountFactor: 0.7,
        lookAhead: 2
      }
    }
    let bobInitialState = {
      belief: [3,7],
      mentalEstimations: [Delta({v: 0.7})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [1000]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.7]})
      }
    }
    let aliceParams = {
      goalCoeffs: [0.8, 0.2],
      metaParams: {
        alpha: 1000,
        discountFactor: 0.7,
        lookAhead: 2
      }
    }
    let aliceInitialState = {
      belief: [6,4],
      mentalEstimations: [Delta({v: 0.4})], // an array of mental estimations (where each estimation is a distribution)
      metaParamsEstimations: {
        alpha: Categorical({vs: [1000]}),
        lookAhead: Categorical({vs: [2]}),
        discountFactor: Categorical({vs: [0.7]})
      }
    }
    return {name, bobParams, bobInitialState, aliceParams, aliceInitialState, options:  options}
  }

  return [getScenario1(), getScenario2(), getScenario3(), getScenario4(), getScenario5(),
    getScenario1FromWriteUp(), getScenario2FromWriteUp()]
}

/**
 *
 * @param scenarios
 *  an array of dictionaries consisting of params, beliefs and estimations of both agents
 */
let simulateScenarios = function(scenarios) {
  if (scenarios.length == 0) return
  simulateScenario(scenarios[0])
  simulateScenarios(scenarios.slice(1))
}

let simulateScenario = function(scenario) {
  display(stringInABox("Scenario: " + scenario.name))
  display("Alice params:")
  display(scenario.aliceParams)
  display("Alice initial state:")
  display(scenario.aliceInitialState)
  display("Bob params:")
  display(scenario.bobParams)
  display("Bob initial state:")
  display(scenario.bobInitialState)
  let game = makeCSMG(makeTrustCSMG(scenario.options))
  let alice = makeAgent(scenario.aliceParams, 'investor', scenario.aliceInitialState, game)
  let bob = makeAgent(scenario.bobParams, 'investee', scenario.bobInitialState, game)
  let players = { investor: alice, investee: bob}
  let trajectory = simulate(game, players, scenario.options.horizon)
  display(trajectory)
}

let computeTrust = function(agent, state, beliefAPI) {
  // let beliefAPI = agent.beliefAPI
  // let belief = beliefAPI.belief
  let beliefFn = agent.belief
  display(beliefFn(state))
  let goalCoeffExp = beliefAPI.goalCoeffExpectation
  return goalCoeffExp(beliefFn(state), 1)
}

let computeTrustEstimation = function(agent, state) {
  let mentalRewards = agent.mentalRewards
  return mentalRewards(state)[0]
}

/** Simulate execution */
let simulate = function(game, players, horizon, state) {
  let trajectory = function(state, timeLeft, beliefAPI)  {
    if (timeLeft > 0) {
      let actingPlayer = players[state.turn]
      display("New iteration. Time left: " + timeLeft + ", " + names[state.turn] + " to act")
      let act = actingPlayer.act
      let start = _.now()
      let action = sample(act(state))
      let end = _.now()
      display("Action computed: " + action + ". Took " + (end - start) + " msec")
      let transitionFn = game.transitionFn
      let nextState = transitionFn(state, action)
      display("Updated trusts: { Alice: " + computeTrust(alice, nextState, beliefAPI) +
        ", Bob: " + computeTrust(bob, nextState, beliefAPI) + "}")
      // let mentalRewards = actingPlayer.mentalRewards
      display("Updated trust estimations: { Alice (estimation of Bob's trust): " + computeTrustEstimation(alice, nextState) +
        ", Bob (estimation of Alice's trust): " + computeTrustEstimation(bob, nextState) + "}")
      // if (timeLeft == 1) {
      //   var aliceBelief = players['investor'].belief
      //   var bobBelief = players['investee'].belief
      //   display("final trust")
      //   display("Alice: " + aliceComputeTrust(aliceBelief(nextState)))
      //   display("Bob: " + bobComputeTrust(bobBelief(nextState)))
      // }
      return [[state, action]].concat(trajectory(nextState, timeLeft - 1, beliefAPI))
    }
    return []
  }
  let names = { investor: 'Alice', investee: 'Bob'}
  let alice = players.investor
  let bob = players.investee
  let beliefAPI = game.API.belief
  let startingState = (state === undefined) ? game.initialState : state
  // let horizon = game.params.horizon
  display("Simulation starts. Alice and Bob with " + horizon + " steps.")
  display("Initial trusts: {Alice: " + computeTrust(alice, startingState, beliefAPI) +
    ", Bob: " + computeTrust(bob, startingState, beliefAPI) + "}")
  return trajectory(startingState, horizon, beliefAPI)
}

// let trajectory = simulate(trustCSMG, players)

// display(trajectory)
let scenarios = getScenarios()
// simulateScenarios(scenarios)
simulateScenario(scenarios[6])

// display(stringInABox("hello"))