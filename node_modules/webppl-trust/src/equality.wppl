/** dependencies:
 * - lambdas
 */

/** EQUALITY FUNCTIONS */

let EPSILON = Number.EPSILON * 10 // used for floating point comparisons

/** checks two numbers are approximately equal */
let approxEqual = function(a,b) {
    return Math.abs(a - b) < EPSILON
}

let approxEqualArr = function(arr1,arr2) {
    let eachEqual = map2(function(a1,a2) {
        return approxEqual(a1,a2)
    }, arr1, arr2)
    return all(identity, eachEqual)
}

let primitiveEqual = function(a,b) {
    return a === b
}

/** this could be useful for numeric types (auto conversion)*/
let primitiveEqualLoose = function(a,b) {
    return a == b
}

/** all non primitive types are treated as objects
 * this applies to arrays or even strings. */
/** NOTE: this is probbaly not necessary as _.isEqual()
 * does the same job!! */
let objectsEqual = function(o1,o2) {
    if (o1 === o2) return true; /** this catches simple types */
    if (o1 == null || o2 == null) return false
    /** first check keys match (order doesnt matter) */
    let keys1 = sort(_top.Object.keys(o1))
    let keys2 = sort(_top.Object.keys(o2))
    if (keys1.length !== keys2.length) return false
    if (!all(identity, map2(primitiveEqual, keys1, keys2))) return false

    /** now check (recursively) that values at keys are equal */
    let equalOnKey = function(key) { return objectsEqual(o1[key], o2[key]) }
    return all(identity, map(equalOnKey, keys1))
}